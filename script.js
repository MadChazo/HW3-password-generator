// Assignment Code
var generateBtn = document.querySelector("#generate");

function generatePassword() {
  // Starting variables with placeholder or empty values
  var passwordData = {
    length: 8,
    spChar: false,
    num: false,
    uppercase: false,
    lowercase: false,
  };
  var passwordContains = [];
  var password = "";
  // List of lowercase characters
  var lowercase = [
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
  ];
  // List of uppercase characters
  var uppercase = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "H",
    "I",
    "J",
    "K",
    "L",
    "M",
    "N",
    "O",
    "P",
    "Q",
    "R",
    "S",
    "T",
    "U",
    "V",
    "W",
    "X",
    "Y",
    "Z",
  ];
  // Special characters pulled from list by OWASP foundation, not including characters that are confusing to JavaScript such as " ' or \, and not including space as an option because many sites don't allow spaces in passwords
  var special = [
    "!",
    "#",
    "$",
    "%",
    "&",
    "(",
    ")",
    "*",
    "+",
    ",",
    "-",
    ".",
    "/",
    ":",
    "<",
    ";",
    "<",
    "=",
    ">",
    "?",
    "@",
    "[",
    "]",
    "^",
    "_",
    "`",
    "{",
    "}",
    "|",
    "~",
  ];
  // Prompt for password length and re-prompt if unusable answer given
  // Learned about this do...while solution from Rob M. on stackoverflow (https://stackoverflow.com/a/15047174)
  do {
    passwordData.length = parseInt(
      prompt(
        "How long should your password be?\n(Please input an integer between 8 and 128.)",
        8
      )
    );
  } while (
    isNaN(passwordData.length) ||
    passwordData.length < 8 ||
    passwordData.length > 128
  );
  // Ask about types of characters to include in password
  passwordData.lowercase = confirm(
    "Should your password contain lowercase characters?\n(OK = yes; Cancel = no)"
  );
  passwordData.uppercase = confirm(
    "Should your password contain uppercase characters?\n(OK = yes; Cancel = no)"
  );
  passwordData.num = confirm(
    "Should your password contain numeric characters?\n(OK = yes; Cancel = no)"
  );
  passwordData.spChar = confirm(
    "Should your password contain special characters?\n(OK = yes; Cancel = no)"
  );
  // If no characters are confirmed, error message results
  if (
    !passwordData.spChar &&
    !passwordData.num &&
    !passwordData.uppercase &&
    !passwordData.lowercase
  ) {
    alert(
      "Your password must contain at least one type of character. Please try again."
    );
    return "Try Again";
  }
  // passwordContains holds character types selected
  if (passwordData.lowercase) {
    passwordContains.push("lowercase");
  }
  if (passwordData.uppercase) {
    passwordContains.push("uppercase");
  }
  if (passwordData.num) {
    passwordContains.push("number");
  }
  if (passwordData.spChar) {
    passwordContains.push("special");
  }
  // This is the actual generator - nextChar gets a random type of character from the passwordContains array, and it determines what type of character will be added next, either a number or a string from one of the character arrays
  for (let i = 0; i < passwordData.length; i++) {
    var nextChar =
      passwordContains[Math.floor(Math.random() * passwordContains.length)];
    if (nextChar == "lowercase") {
      password =
        password + lowercase[Math.floor(Math.random() * lowercase.length)];
    } else if (nextChar == "uppercase") {
      password =
        password + uppercase[Math.floor(Math.random() * uppercase.length)];
    } else if (nextChar == "number") {
      password = password + Math.floor(Math.random() * 10); //don't need an array for numbers since they are what is already generated by Math.random
    } else if (nextChar == "special") {
      password = password + special[Math.floor(Math.random() * special.length)];
    } else {
      console.log("nextChar Error");
      return "Try Again";
    }
  }
  return password;
}

// Write password to the #password input
function writePassword() {
  var password = generatePassword();
  var passwordText = document.querySelector("#password");

  passwordText.value = password;
}

// Add event listener to generate button
generateBtn.addEventListener("click", writePassword);
